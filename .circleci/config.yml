version: 2
jobs:
  build:
    docker:
      - image: circleci/clojure:lein-2.7.1
    environment:
      LEIN_ROOT: nbd
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Install some system dependencies
          command: sudo apt-get update -qq && sudo apt-get install -y ssh rsync
      - restore_cache:
          key: dashboard-{{ checksum "board/project.clj" }}
      - run: cd board && lein deps
      - save_cache:
          paths:
            - ~/.m2
          key: dashboard-{{ checksum "board/project.clj" }}
      - run: cd board && lein do test :all, eastwood, uberjar
      - store_artifacts:
          path: board/target/dashboard-standalone.jar
          destination: uberjar
      - run:
          name: Move artifacts and Dockerfile to workspace
          command: |
            mkdir -p /tmp/workspace/board/target
            mv board/target/dashboard-standalone.jar /tmp/workspace/board/target
            mv board/Dockerfile /tmp/workspace/board
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - board

  release-stage:
    machine: true
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Release staging image if tests pass and branch is master
          command: |
            mv /tmp/workspace/board .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull --no-cache -t jerben/dashboard:latest board
            docker push jerben/dashboard:latest

  deploy-stage:
    machine: true
    steps:
      - checkout
      - run:
          name: Deploy the docker images to staging
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            ssh -NL localhost:2374:/var/run/docker.sock root@pillowboard.io &
            docker -H localhost:2374 service update --force --with-registry-auth --image jerben/dashboard:latest dashboard-staging

  release-prod:
    machine: true
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Release production image if tests pass and branch is master
          command: |
            mv /tmp/workspace/board .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull -t jerben/dashboard:$CIRCLE_TAG board
            docker push jerben/dashboard:$CIRCLE_TAG

  deploy-prod:
    machine: true
    steps:
      - checkout
      - run:
          name: Deploy the docker images to live
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
            ssh root@51.15.110.49 "mkdir -p /usr/share/docker/dashboard/ && rm -f /usr/share/docker/dashboard/docker-compose.prod.yml"
            ssh root@51.15.110.49 "rm -f /usr/share/docker/dashboard/.env"
            ssh root@51.15.110.49 "echo DATABASE_URL=$DATABASE_URL > /usr/share/docker/dashboard/.env"
            ssh root@51.15.110.49 "echo DATABASE_NAME=production >> /usr/share/docker/dashboard/.env"
            rsync -avz docker-compose.prod.yml root@51.15.110.49:/usr/share/docker/dashboard/
            ssh root@51.15.110.49 "docker login -u $DOCKER_USER -p \"$DOCKER_PASS\""
            ssh root@51.15.110.49 "cd /usr/share/docker/dashboard/ && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml -p live down && docker-compose -f docker-compose.prod.yml -p live up -d"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - release-stage:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-stage:
          requires:
            - release-stage
          filters:
            branches:
              only: master
      - release-prod:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - deploy-prod:
          requires:
            - release-prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[0-9]+(\.[0-9]+)*/
