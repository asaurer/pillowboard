---
- name: dependency provisioning
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: false
  tasks:
    - name: install python2
      raw: sudo apt-get -y install python-simplejson
- hosts: all
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "add docker repository"
    apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable' state=present
    when: ansible_distribution == "Ubuntu"

  - name: "ensure old versions of docker are purged 1"
    apt: name=lxc-docker state=absent purge=yes
    when: ansible_distribution == "Ubuntu"

  - name: "ensure old versions of docker are purged 2"
    apt: name=docker state=absent purge=yes
    when: ansible_distribution == "Ubuntu"

  - name: "ensure old versions of docker are purged 3"
    apt: name=docker-engine state=absent purge=yes
    when: ansible_distribution == "Ubuntu"

  - name: "ensure old versions of docker are purged 4"
    apt: name=docker.io state=absent purge=yes
    when: ansible_distribution == "Ubuntu"
  - name: "get kernel version"
    shell: uname -r
    register: kernel

  - name: "install 14.04 pre-req 1"
    apt:
        name: linux-image-extra-{{ kernel.stdout }}
        state: present
        update_cache: yes
        install_recommends: yes
    when: ansible_distribution == "Ubuntu"
    retries: 3
    delay: 20

  - name: "install 14.04 pre-req 2"
    apt: name=linux-image-extra-virtual state=present update_cache=yes install_recommends=yes
    when: ansible_distribution == "Ubuntu"
    retries: 3
    delay: 20
  - name: "install docker"
    apt: name=docker-ce=17.06.2* state=present update_cache=yes install_recommends=yes allow_unauthenticated=yes
    when: ansible_distribution == "Ubuntu"
    retries: 3
    delay: 20
  - name: "add docker group"
    group: name=docker state=present

  - name: "add ubuntu to docker group"
    user: name=ubuntu groups=docker append=yes

  - name: "Restart Docker service"
    service: name=docker state=started

  - name: "get docker info"
    shell: docker info
    register: docker_info
    changed_when: False

- hosts: docker-manager-first
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "create primary swarm manager"
    shell: docker swarm init --advertise-addr {{ ansible_eth0['ipv4']['address'] }}
    when: "docker_info.stdout.find('Swarm: inactive') != -1"

  - name: "get docker swarm manager token"
    shell: docker swarm join-token -q manager
    register: manager_token

  - name: "get docker swarm worker token"
    shell: docker swarm join-token -q worker
    register: worker_token

- hosts: docker-managers
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "join as a manager"
    shell: "docker swarm join --token {{ hostvars['manager1']['manager_token']['stdout'] }} {{ hostvars['manager1']['ansible_eth0']['ipv4']['address'] }}:2377"
    when: docker_info.stdout.find("Swarm{{':'}} inactive") != -1
    retries: 3
    delay: 20

- hosts: docker-workers
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "join as a worker"
    shell: "docker swarm join --token {{ hostvars['manager1']['worker_token']['stdout'] }} {{ hostvars['manager1']['ansible_eth0']['ipv4']['address'] }}:2377"
    when: "docker_info.stdout.find('Swarm: inactive') != -1"
    retries: 3
    delay: 20

- hosts: docker-api
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "Confirm Service Exists"
    stat: path=/etc/init.d/docker
    register: service_wrapper

  - name: "Check whether api already exposed"
    command: "grep 'DOCKER_OPTS=\"-D -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock\"' /etc/default/docker"
    register: check_has_api
    always_run: True
    ignore_errors: True
    changed_when: False

  - name: "Stop Docker"
    service: name=docker state=stopped
    when:
      - service_wrapper.stat.exists
      - check_has_api.stdout == ""
    register: service_stopped

  - name: "expose docker api"
    lineinfile: "dest=/etc/default/docker state=present regexp='#DOCKER_OPTS=' line='DOCKER_OPTS=\"-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock\"'"
    when:
      - service_stopped
      - check_has_api.stdout == ""

  - name: "Restart Docker service"
    service: name=docker state=started
    when:
      - service_wrapper.stat.exists
      - check_has_api.stdout == ""

- hosts: docker-cloud
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: "Confirm Service Exists"
    stat: path=/etc/init.d/docker
    register: service_wrapper

  - name: "check for daemon file"
    stat: path=/etc/docker/daemon.json
    register: daemon_file

  - name: "Stop Docker"
    service: name=docker state=stopped
    when:
      - service_wrapper.stat.exists
      - not daemon_file.stat.exists
    register: service_stopped

  - name: "create daemon file"
    template: src=templates/daemon.j2 dest=/etc/docker/daemon.json
    when: not daemon_file.stat.exists

  - name: "Restart Docker service"
    service: name=docker state=started
    when:
      - service_wrapper.stat.exists

- hosts: docker-manager-first
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
  - name: List networks
    shell: docker network ls
    register: docker_networks
  - name: Create network when not there
    shell: docker network create --driver overlay --subnet {{ item.subnet }} --gateway {{ item.gateway }} {{ item.name }}
    with_items:
        -  {
            	name: 'caylent-default',
            	subnet: '17.0.0.0/16',
            	gateway: '17.0.0.1'
            }

    when: docker_networks.stdout.find( item.name ) == -1
